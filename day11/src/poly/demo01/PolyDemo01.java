package poly.demo01;

/**
 * @ClassName PolyDemo01
 * @Description 此类用于演示功能
 * @Author Shark
 * @DateTime 2022年07月08日 14时05分05秒
 * @Version 1.0
 *
 * 多态:
 *      含义:事物的多种形态(对象的多种形态)
 *
 * 生活中的多态:
 *      西游记中的"白骨精":
 *          妖怪形态的"白骨精"(数据类型:妖怪)
 *          老爷爷形态的"白骨精"(数据类型:老爷爷)
 *          老奶奶形态的"白骨精"(数据类型:老奶奶)
 *          小姐姐形态的"白骨精"(数据类型:小姐姐)
 *
 * 名词解释:
 *      编译时状态:对象在内存中保存的本质形态
 *      运行时状态:对象在使用过程中的状态
 *      单态:编译时状态和运行时状态一致的时候
 *          举例:
 *              Student s = new Student();
 *
 * 程序中的多态:
 *      编译时状态和运行时状态不一致的时候
 *          举例:
 *              Animal a = new Cat();
 *
 * 多态的前提条件:
 *      1.必须要有继承关系或实现关系
 *      2.必须要有方法的重写(如果没有重写,也可以构成多态,不会出现编译报错,这样的多态没有实际意义)
 *      3.多态的语法格式(三选一)
 *          (1)父类的引用指向子类对象
 *              格式:
 *                  父类类名 多态对象名 = new 子类类名(实参);
 *          (2)父接口的引用指向实现类对象
 *              格式:
 *                  父接口名 多态对象名 = new 实现类类名(实参);
 *          (3)特殊的多态形式:this关键字的第三种用法(暂不涉及)
 *              格式:
 *                  在父类中构造器中或实现方法
 */
public class PolyDemo01 {
}
